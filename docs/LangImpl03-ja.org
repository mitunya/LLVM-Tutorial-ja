# -*- mode: org; -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>

# export theme
# https://github.com/fniessen/org-html-themes/blob/master/org/theme-readtheorg.setup
# https://github.com/fniessen/org-html-themes

#+STARTUP: showeverything
#+OPTIONS: num:nil

[[https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl03.html]]

* 3. Kaleidoscope: Code generation to LLVM IR

** 3.1. Chapter 3 Introduction
LLVMで言語を実装する」チュートリアルの第3章へようこそ。この章では、第2章で構築された抽象構文木をLLVM IRに変換する方法を説明します。これは、LLVMがどのように物事を行うかについて少し学ぶと同時に、LLVMの使いやすさを実証するものです。LLVM IRのコードを生成するよりも、レキサやパーサを構築する方がずっと大変なのです :)

注意：この章以降のコードは、LLVM 3.7以降が必要です。LLVM 3.6以前では動作しません。また、このチュートリアルのバージョンは、あなたのLLVMのリリースと一致するものを使う必要があることにも注意してください。LLVMの公式リリースを使用している場合は、そのリリースに含まれるドキュメントのバージョンか、llvm.orgのリリースページにあるものを使用してください。

** 3.2. Code Generation Setup

LLVMのIRを生成するために、いくつかの簡単な設定をしたい。まず、各ASTクラスに仮想コード生成(codegen)メソッドを定義します。

#+begin_src c++
/// ExprAST - Base class for all expression nodes.
class ExprAST {
public:
  virtual ~ExprAST() = default;
  virtual Value *codegen() = 0;
};

/// NumberExprAST - Expression class for numeric literals like "1.0".
class NumberExprAST : public ExprAST {
  double Val;

public:
  NumberExprAST(double Val) : Val(Val) {}
  Value *codegen() override;
};
...
#+end_src

codegen()メソッドは、そのASTノードのIRを、それが依存するすべてのものと一緒に出すと言い、それらはすべて、LLVM Valueオブジェクトを返します。"Value "は、LLVMで "Static Single Assignment (SSA) register" または "SSA value "を表すために使われるクラスである。SSA値の最も特徴的な点は、その値が関連する命令の実行時に計算され、その命令が再実行されるまで（そしてされた場合）新しい値を取得しないことです。言い換えれば、SSA値を「変更」する方法はありません。詳しくは、スタティック・シングル・アサインメントを読んでください。

ExprASTのクラス階層に仮想メソッドを追加する代わりに、ビジターパターンや他の方法でモデル化することもできます。繰り返しになりますが、このチュートリアルではソフトウェア工学の良い実践方法については触れません。この目的では仮想メソッドを追加するのが最もシンプルです。

このメソッドは、コード生成中に見つかったエラー（例えば、未宣言のパラメータの使用など）を報告するために使用されます。

#+begin_src c++
static LLVMContext TheContext;
static IRBuilder<> Builder(TheContext);
static std::unique_ptr<Module> TheModule;
static std::map<std::string, Value *> NamedValues;

Value *LogErrorV(const char *Str) {
  LogError(Str);
  return nullptr;
}
#+end_src

静的変数は、コード生成時に使用されます。TheContextは、型と定数値のテーブルのような、多くのLLVMのコアデータ構造を所有する不透明なオブジェクトです。我々は、これを詳細に理解する必要はなく、これを必要とするAPIに渡すための単一のインスタンスが必要なだけです。

Builderオブジェクトは、LLVMの命令を簡単に生成できるようにするヘルパーオブジェクトです。IRBuilderクラスのテンプレートのインスタンスは、命令を挿入する現在の場所を追跡し、新しい命令を作成するためのメソッドを持っています。

TheModuleはLLVMの構成要素で、関数とグローバル変数を含んでいます。多くの点で、LLVM IRがコードを格納するために使用するトップレベルの構造体です。これは、codegen() メソッドが unique_ptr<Value> ではなく、生の Value* を返す理由である、私たちが生成するすべての IR のためのメモリを所有します。

NamedValuesマップは、現在のスコープでどの値が定義され、そのLLVM表現が何であるかを追跡する。(言い換えれば、コードのシンボル・テーブルである）。この形式のKaleidoscopeでは、参照できるのは、関数パラメータだけです。そのため、関数パラメータは、その関数本体のコードを生成するときに、このマップに入ります。

これらの基本を押さえた上で、各式のコードを生成する方法について話を始めます。これは、Builder が何かにコードを生成するようにセットアップされていることを前提にしていることに注意してください。今のところ、これはすでに行われていると仮定し、コードを生成するためだけに使用することにします。


** 3.3. Expression Code Generation

式ノードのLLVMコードの生成は非常に簡単で、4つの式ノードすべてについて、45行以下のコメント付きコードで構成されています。まず、数値リテラルを作成します。

#+begin_src c++
Value *NumberExprAST::codegen() {
  return ConstantFP::get(TheContext, APFloat(Val));
}
#+end_src

LLVM IRでは、数値定数はConstantFPクラスで表現され、内部でAPFloatに数値を保持します（APFloatはArbitrary Precisionの浮動小数点定数を保持できる機能を持ちます）。このコードは基本的にConstantFPを生成して返すだけです。なお、LLVMのIRでは、定数はすべて一意的にまとめて共有されています。このため、APIでは "new foo(...)" や "foo::Create(...)" の代わりに "foo::get(...)" というイディオムを使用しています。

#+begin_src c++
Value *VariableExprAST::codegen() {
  // Look this variable up in the function.
  Value *V = NamedValues[Name];
  if (!V)
    LogErrorV("Unknown variable name");
  return V;
}
#+end_src

変数の参照も、LLVMを使えば非常に簡単です。Kaleidoscopeのシンプルバージョンでは、変数はすでにどこかで放出され、その値が利用可能であると仮定しています。実際には、NamedValuesマップに入れられる値は、関数の引数だけです。このコードでは、指定された名前がマップにあるかどうか（ない場合は、未知の変数が参照されている）を単純に確認し、その値を返しています。今後の章では、シンボルテーブルのループ誘導変数や、ローカル変数のサポートを追加していく予定です。

#+begin_src c++
Value *BinaryExprAST::codegen() {
  Value *L = LHS->codegen();
  Value *R = RHS->codegen();
  if (!L || !R)
    return nullptr;

  switch (Op) {
  case '+':
    return Builder.CreateFAdd(L, R, "addtmp");
  case '-':
    return Builder.CreateFSub(L, R, "subtmp");
  case '*':
    return Builder.CreateFMul(L, R, "multmp");
  case '<':
    L = Builder.CreateFCmpULT(L, R, "cmptmp");
    // Convert bool 0/1 to double 0.0 or 1.0
    return Builder.CreateUIToFP(L, Type::getDoubleTy(TheContext),
                                "booltmp");
  default:
    return LogErrorV("invalid binary operator");
  }
}
#+end_src

二項演算子はもっと面白くなり始める。ここでの基本的な考え方は、式の左辺のコードを再帰的に出力し、次に右辺のコードを出力し、そして二項式の結果を計算する、というものです。このコードでは、正しいLLVM命令を作成するために、オペコードの簡単なスイッチを行っています。

上の例では、LLVMビルダークラスがその価値を発揮し始めている。IRBuilderは新しく作成された命令をどこに挿入するか知っています。あなたがしなければならないのは、どの命令を作成するか（例えばCreateFAddで）、どのオペランドを使うか（ここではLとR）、オプションで生成される命令の名前を指定することだけです。

LLVMの良いところは、名前は単なるヒントに過ぎないということです。例えば、上記のコードが複数の「addtmp」変数を生成する場合、LLVMは自動的にそれぞれの変数に増加するユニークな数値サフィックスを提供します。命令のローカル値名は純粋にオプションですが、IRダンプを読むのがずっと楽になります。

LLVMの命令は、厳しい規則によって制約されています。例えば、加算命令の左オペランドと右オペランドは同じ型でなければならず、加算の結果の型はオペランドの型と一致していなければなりません。Kaleidoscopeではすべての値がdoubleであるため、add、sub、mulのコードは非常にシンプルになります。

一方、LLVMでは、fcmp命令は常に「i1」値（1ビットの整数）を返すと規定されている。この問題は、Kaleidoscopeが0.0または1.0の値であることを望んでいることです。このようなセマンティクスを得るために、fcmp命令をuitofp命令と組み合わせます。この命令は、入力された整数を符号なし値として扱うことで、浮動小数点値に変換する。一方、sitofp命令を使用した場合、Kaleidoscopeの「<」演算子は、入力値に応じて0.0と-1.0を返すことになります。

#+begin_src c++
Value *CallExprAST::codegen() {
  // Look up the name in the global module table.
  Function *CalleeF = TheModule->getFunction(Callee);
  if (!CalleeF)
    return LogErrorV("Unknown function referenced");

  // If argument mismatch error.
  if (CalleeF->arg_size() != Args.size())
    return LogErrorV("Incorrect # arguments passed");

  std::vector<Value *> ArgsV;
  for (unsigned i = 0, e = Args.size(); i != e; ++i) {
    ArgsV.push_back(Args[i]->codegen());
    if (!ArgsV.back())
      return nullptr;
  }

  return Builder.CreateCall(CalleeF, ArgsV, "calltmp");
}
#+end_src

LLVMでは、関数呼び出しのコード生成は非常に簡単です。上のコードは、最初にLLVMモジュールのシンボルテーブルで関数名のルックアップを行います。LLVMモジュールは、JITする関数を保持するコンテナであることを思い出してください。各関数にユーザが指定したものと同じ名前をつけることで、LLVMのシンボルテーブルを使って関数名を解決することができます。

呼び出す関数が決まったら、渡される各引数を再帰的にコード化し、LLVMの呼び出し命令を作成します。LLVMは、デフォルトでC言語のネイティブな呼び出し規約を使用しているので、これらの呼び出しは、追加の努力なしに、「sin」や「cos」のような標準ライブラリ関数にも呼び出すことができることに注意してください。

これで、Kaleidoscopeでこれまで扱った4つの基本的な式の取り扱いが終わりました。もっと追加することもできます。例えば、LLVM言語リファレンスを見れば、この基本的なフレームワークに簡単に組み込める、興味深い命令がいくつか見つかるでしょう。

** 3.4. Function Code Generation

プロトタイプと関数のコード生成は、多くの詳細を処理する必要があり、そのため、式コード生成よりもコードが美しくありませんが、いくつかの重要な点を説明することができます。まず、プロトタイプのコード生成について説明します。プロトタイプは、関数本体と外部関数宣言の両方に使用されます。コードの始まりは

#+begin_src c++
Function *PrototypeAST::codegen() {
  // Make the function type:  double(double,double) etc.
  std::vector<Type*> Doubles(Args.size(),
                             Type::getDoubleTy(TheContext));
  FunctionType *FT =
    FunctionType::get(Type::getDoubleTy(TheContext), Doubles, false);

  Function *F =
    Function::Create(FT, Function::ExternalLinkage, Name, TheModule.get());
#+end_src

このコードは、数行の中に多くのパワーを詰め込んでいます。まず、この関数は「値*」の代わりに「関数*」を返していることに注意してください。なぜなら、"prototype "は関数の外部インターフェース（式によって計算される値ではない）について本当に話すので、codegen'dされたとき、それが対応するLLVM関数を返すことは理にかなっています。

FunctionType::getの呼び出しは、与えられたプロトタイプに使用されるべきFunctionTypeを作成します。Kaleidoscopeのすべての関数引数はdouble型なので、最初の行は、LLVM double型の "N "個のベクトルを作成します。そして、Functiontype::getメソッドを使って、引数として「N」個のdoubleを取り、結果として1個のdoubleを返し、varargではない（falseパラメータがこれを示す）関数型を生成しています。LLVMの型は、定数と同じように一意であることに注意してください、したがって、型を「new」するのではなく、「get」するのです。

上記の最終行では、プロトタイプに対応するIR Functionを実際に生成しています。これは、使用する型、リンク、名前、そして、どのモジュールに挿入するかを示しています。「外部リンク」とは、その関数が現在のモジュールの外部で定義される可能性があること、および/または、モジュールの外部の関数から呼び出される可能性があることを意味します。TheModuleが指定されているので、この名前は"TheModule"のシンボルテーブルに登録される。

#+begin_src c++
// Set names for all arguments.
unsigned Idx = 0;
for (auto &Arg : F->args())
  Arg.setName(Args[Idx++]);

return F;
#+end_src

最後に、関数の各引数の名前を、Prototypeで与えられた名前に従って設定します。このステップは厳密には必要ではありませんが、名前を統一することでIRが読みやすくなり、後続のコードがPrototypeのASTで調べることなく、引数の名前を直接参照することができるようになります。

この時点で、私たちはボディを持たない関数プロトタイプを持っています。これが、LLVM IRが関数宣言を表現する方法である。Kaleidoscopeのextern文では、ここまでが必要です。しかし、関数定義の場合は、codegenして関数本体を付ける必要があります。

#+begin_src c++
Function *FunctionAST::codegen() {
    // First, check for an existing function from a previous 'extern' declaration.
  Function *TheFunction = TheModule->getFunction(Proto->getName());

  if (!TheFunction)
    TheFunction = Proto->codegen();

  if (!TheFunction)
    return nullptr;

  if (!TheFunction->empty())
    return (Function*)LogErrorV("Function cannot be redefined.");
#+end_src

関数定義については、まずTheModuleのシンボルテーブルを検索して、この関数の既存のバージョンを探します。Module::getFunctionがNULLを返した場合は、以前のバージョンは存在しないので、Prototypeから1つをコード化します。どちらの場合でも、関数を開始する前に、関数が空であること（つまり、まだボディを持っていないこと）を表明したいと思います。

#+begin_src c++
// Create a new basic block to start insertion into.
BasicBlock *BB = BasicBlock::Create(TheContext, "entry", TheFunction);
Builder.SetInsertPoint(BB);

// Record the function arguments in the NamedValues map.
NamedValues.clear();
for (auto &Arg : TheFunction->args())
  NamedValues[Arg.getName()] = &Arg;
#+end_src

さて、いよいよBuilderのセットアップに入ります。最初の行は新しい基本ブロック（"entry "という名前）を作成し、これをTheFunctionに挿入します。そして2行目は、新しい基本ブロックの末尾に新しい命令を挿入するようビルダーに指示しています。LLVMの基本ブロックは、Control Flow Graphを定義する関数の重要な部分である。制御フローがないので、この時点では私たちの関数は1つのブロックしか含んでいません。これは第5章で修正します :)。

次に、関数の引数をNamedValuesマップに追加し（最初にクリアした後）、VariableExprASTノードからアクセスできるようにします。

#+begin_src c++
if (Value *RetVal = Body->codegen()) {
  // Finish off the function.
  Builder.CreateRet(RetVal);

  // Validate the generated code, checking for consistency.
  verifyFunction(*TheFunction);

  return TheFunction;
}
#+end_src

挿入ポイントが設定され、NamedValuesマップが入力されると、関数のルート式に対してcodegen()メソッドを呼び出します。エラーが発生しない場合、これは、エントリブロックに式を計算するコードを発行し、計算された値を返します。エラーが起きないと仮定すると、次にLLVM ret命令を作成し、関数を完成させます。関数が構築されると、LLVMが提供するverifyFunctionを呼び出します。この関数は、生成されたコードに対して様々な整合性チェックを行い、コンパイラが正しく動作しているかどうかを判断します。これを使うことは重要で、多くのバグを発見することができる。この関数が終了し、検証されたら、それを返す。

#+begin_src c++
  // Error reading body, remove function.
  TheFunction->eraseFromParent();
  return nullptr;
}
#+end_src

あとは、エラーケースの処理だけです。簡単のために、eraseFromParentメソッドで生成した関数を削除することで、これを処理します。これによって、ユーザは間違って入力した関数を再定義することができる。もし削除しなければ、その関数はシンボルテーブルに本体と一緒に保存され、将来再定義されることはないだろう。

FunctionAST::codegen() メソッドが既存のIR Functionを見つけた場合、そのシグネチャを定義自身のプロトタイプに対して検証しないのです。これは、以前の「extern」宣言が関数定義のシグネチャよりも優先されることを意味し、例えば、関数の引数の名前が異なる場合、codegenが失敗する原因となります。このバグを修正する方法はいくつかありますので、何ができるか考えてみてください。以下はテストケースです。

#+begin_src c++
extern foo(a);     # ok, defines foo.
def foo(b) b;      # Error: Unknown variable name. (decl using 'a' takes precedence).
#+end_src


** 3.5. Driver Changes and Closing Thoughts

今のところ、LLVMへのコード生成は、きれいなIRコールを見ることができることを除いて、実際にはあまり得るものがありません。サンプルコードでは、"HandleDefinition"、"HandleExtern "などの関数にcodegenの呼び出しを挿入し、LLVM IRをダンプアウトしています。これは、単純な関数のLLVM IRを見るための良い方法を提供します。例えば

#+begin_src
ready> 4+5;
Read top-level expression:
define double @0() {
entry:
  ret double 9.000000e+00
}
#+end_src

パーサーがトップレベル式を無名関数に変換していることに注意してください。これは、次の章で JIT サポートを追加するときに便利です。また、このコードは非常に忠実に書き写されており、IRBuilderによって行われる単純な定数の折りたたみ以外の最適化は行われていないことに注意してください。次章で明示的に最適化を加える予定です。

#+begin_src
ready> def foo(a b) a*a + 2*a*b + b*b;
Read function definition:
define double @foo(double %a, double %b) {
entry:
  %multmp = fmul double %a, %a
  %multmp1 = fmul double 2.000000e+00, %a
  %multmp2 = fmul double %multmp1, %b
  %addtmp = fadd double %multmp, %multmp2
  %multmp3 = fmul double %b, %b
  %addtmp4 = fadd double %addtmp, %multmp3
  ret double %addtmp4
}
#+end_src

これはいくつかの簡単な算術を示したものである。命令を作成するために使用するLLVMビルダーコールと驚くほど似ていることに注意してください。

#+begin_src
ready> def bar(a) foo(a, 4.0) + bar(31337);
Read function definition:
define double @bar(double %a) {
entry:
  %calltmp = call double @foo(double %a, double 4.000000e+00)
  %calltmp1 = call double @bar(double 3.133700e+04)
  %addtmp = fadd double %calltmp, %calltmp1
  ret double %addtmp
}
#+end_src

これはいくつかの関数呼び出しを示しています。この関数を呼び出すと実行に時間がかかることに注意してください。将来は、条件付き制御フローを追加して、実際に再帰を使えるようにする予定です。 :)

#+begin_src
ready> extern cos(x);
Read extern:
declare double @cos(double)

ready> cos(1.234);
Read top-level expression:
define double @1() {
entry:
  %calltmp = call double @cos(double 1.234000e+00)
  ret double %calltmp
}
#+end_src

libmの "cos "関数のexternと、その呼び出しを示しています。

#+begin_exampe
ready> ^D
; ModuleID = 'my cool jit'

define double @0() {
entry:
  %addtmp = fadd double 4.000000e+00, 5.000000e+00
  ret double %addtmp
}

define double @foo(double %a, double %b) {
entry:
  %multmp = fmul double %a, %a
  %multmp1 = fmul double 2.000000e+00, %a
  %multmp2 = fmul double %multmp1, %b
  %addtmp = fadd double %multmp, %multmp2
  %multmp3 = fmul double %b, %b
  %addtmp4 = fadd double %addtmp, %multmp3
  ret double %addtmp4
}

define double @bar(double %a) {
entry:
  %calltmp = call double @foo(double %a, double 4.000000e+00)
  %calltmp1 = call double @bar(double 3.133700e+04)
  %addtmp = fadd double %calltmp, %calltmp1
  ret double %addtmp
}

declare double @cos(double)

define double @1() {
entry:
  %calltmp = call double @cos(double 1.234000e+00)
  ret double %calltmp
}
#+end_example

現在のデモを終了するとき（LinuxではCTRL+D、WindowsではCTRL+ZとENTERでEOFを送る）、生成されたモジュール全体のIRがダンプアウトされます。ここでは、すべての関数が互いに参照し合っている全体像を見ることができます。

これで、Kaleidoscope チュートリアルの第 3 章を終了します。次は、これにJITコード生成とオプティマイザのサポートを追加して、実際にコードを実行する方法を説明します。

** 3.6. Full Code Listing

以下は、LLVMコードジェネレータで拡張した実行例の完全なコードリストです。LLVMライブラリを使用するため、リンクする必要があります。これを行うには、llvm-configツールを使って、makefileやコマンドラインにどのオプションを使用するかを知らせます。

#+begin_src
# Compile
clang++ -g -O3 toy.cpp `llvm-config --cxxflags --ldflags --system-libs --libs core` -o toy
# Run
./toy
#+end_src

以下はそのコードです。

#+begin_src c++
#include "llvm/ADT/APFloat.h"
#include "llvm/ADT/STLExtras.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Type.h"
#include "llvm/IR/Verifier.h"
#include <algorithm>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <map>
#include <memory>
#include <string>
#include <vector>

using namespace llvm;

//===----------------------------------------------------------------------===//
// Lexer
//===----------------------------------------------------------------------===//

// The lexer returns tokens [0-255] if it is an unknown character, otherwise one
// of these for known things.
enum Token {
  tok_eof = -1,

  // commands
  tok_def = -2,
  tok_extern = -3,

  // primary
  tok_identifier = -4,
  tok_number = -5
};

static std::string IdentifierStr; // Filled in if tok_identifier
static double NumVal;             // Filled in if tok_number

/// gettok - Return the next token from standard input.
static int gettok() {
  static int LastChar = ' ';

  // Skip any whitespace.
  while (isspace(LastChar))
    LastChar = getchar();

  if (isalpha(LastChar)) { // identifier: [a-zA-Z][a-zA-Z0-9]*
    IdentifierStr = LastChar;
    while (isalnum((LastChar = getchar())))
      IdentifierStr += LastChar;

    if (IdentifierStr == "def")
      return tok_def;
    if (IdentifierStr == "extern")
      return tok_extern;
    return tok_identifier;
  }

  if (isdigit(LastChar) || LastChar == '.') { // Number: [0-9.]+
    std::string NumStr;
    do {
      NumStr += LastChar;
      LastChar = getchar();
    } while (isdigit(LastChar) || LastChar == '.');

    NumVal = strtod(NumStr.c_str(), nullptr);
    return tok_number;
  }

  if (LastChar == '#') {
    // Comment until end of line.
    do
      LastChar = getchar();
    while (LastChar != EOF && LastChar != '\n' && LastChar != '\r');

    if (LastChar != EOF)
      return gettok();
  }

  // Check for end of file.  Don't eat the EOF.
  if (LastChar == EOF)
    return tok_eof;

  // Otherwise, just return the character as its ascii value.
  int ThisChar = LastChar;
  LastChar = getchar();
  return ThisChar;
}

//===----------------------------------------------------------------------===//
// Abstract Syntax Tree (aka Parse Tree)
//===----------------------------------------------------------------------===//

namespace {

/// ExprAST - Base class for all expression nodes.
class ExprAST {
public:
  virtual ~ExprAST() = default;

  virtual Value *codegen() = 0;
};

/// NumberExprAST - Expression class for numeric literals like "1.0".
class NumberExprAST : public ExprAST {
  double Val;

public:
  NumberExprAST(double Val) : Val(Val) {}

  Value *codegen() override;
};

/// VariableExprAST - Expression class for referencing a variable, like "a".
class VariableExprAST : public ExprAST {
  std::string Name;

public:
  VariableExprAST(const std::string &Name) : Name(Name) {}

  Value *codegen() override;
};

/// BinaryExprAST - Expression class for a binary operator.
class BinaryExprAST : public ExprAST {
  char Op;
  std::unique_ptr<ExprAST> LHS, RHS;

public:
  BinaryExprAST(char Op, std::unique_ptr<ExprAST> LHS,
                std::unique_ptr<ExprAST> RHS)
      : Op(Op), LHS(std::move(LHS)), RHS(std::move(RHS)) {}

  Value *codegen() override;
};

/// CallExprAST - Expression class for function calls.
class CallExprAST : public ExprAST {
  std::string Callee;
  std::vector<std::unique_ptr<ExprAST>> Args;

public:
  CallExprAST(const std::string &Callee,
              std::vector<std::unique_ptr<ExprAST>> Args)
      : Callee(Callee), Args(std::move(Args)) {}

  Value *codegen() override;
};

/// PrototypeAST - This class represents the "prototype" for a function,
/// which captures its name, and its argument names (thus implicitly the number
/// of arguments the function takes).
class PrototypeAST {
  std::string Name;
  std::vector<std::string> Args;

public:
  PrototypeAST(const std::string &Name, std::vector<std::string> Args)
      : Name(Name), Args(std::move(Args)) {}

  Function *codegen();
  const std::string &getName() const { return Name; }
};

/// FunctionAST - This class represents a function definition itself.
class FunctionAST {
  std::unique_ptr<PrototypeAST> Proto;
  std::unique_ptr<ExprAST> Body;

public:
  FunctionAST(std::unique_ptr<PrototypeAST> Proto,
              std::unique_ptr<ExprAST> Body)
      : Proto(std::move(Proto)), Body(std::move(Body)) {}

  Function *codegen();
};

} // end anonymous namespace

//===----------------------------------------------------------------------===//
// Parser
//===----------------------------------------------------------------------===//

/// CurTok/getNextToken - Provide a simple token buffer.  CurTok is the current
/// token the parser is looking at.  getNextToken reads another token from the
/// lexer and updates CurTok with its results.
static int CurTok;
static int getNextToken() { return CurTok = gettok(); }

/// BinopPrecedence - This holds the precedence for each binary operator that is
/// defined.
static std::map<char, int> BinopPrecedence;

/// GetTokPrecedence - Get the precedence of the pending binary operator token.
static int GetTokPrecedence() {
  if (!isascii(CurTok))
    return -1;

  // Make sure it's a declared binop.
  int TokPrec = BinopPrecedence[CurTok];
  if (TokPrec <= 0)
    return -1;
  return TokPrec;
}

/// LogError* - These are little helper functions for error handling.
std::unique_ptr<ExprAST> LogError(const char *Str) {
  fprintf(stderr, "Error: %s\n", Str);
  return nullptr;
}

std::unique_ptr<PrototypeAST> LogErrorP(const char *Str) {
  LogError(Str);
  return nullptr;
}

static std::unique_ptr<ExprAST> ParseExpression();

/// numberexpr ::= number
static std::unique_ptr<ExprAST> ParseNumberExpr() {
  auto Result = std::make_unique<NumberExprAST>(NumVal);
  getNextToken(); // consume the number
  return std::move(Result);
}

/// parenexpr ::= '(' expression ')'
static std::unique_ptr<ExprAST> ParseParenExpr() {
  getNextToken(); // eat (.
  auto V = ParseExpression();
  if (!V)
    return nullptr;

  if (CurTok != ')')
    return LogError("expected ')'");
  getNextToken(); // eat ).
  return V;
}

/// identifierexpr
///   ::= identifier
///   ::= identifier '(' expression* ')'
static std::unique_ptr<ExprAST> ParseIdentifierExpr() {
  std::string IdName = IdentifierStr;

  getNextToken(); // eat identifier.

  if (CurTok != '(') // Simple variable ref.
    return std::make_unique<VariableExprAST>(IdName);

  // Call.
  getNextToken(); // eat (
  std::vector<std::unique_ptr<ExprAST>> Args;
  if (CurTok != ')') {
    while (true) {
      if (auto Arg = ParseExpression())
        Args.push_back(std::move(Arg));
      else
        return nullptr;

      if (CurTok == ')')
        break;

      if (CurTok != ',')
        return LogError("Expected ')' or ',' in argument list");
      getNextToken();
    }
  }

  // Eat the ')'.
  getNextToken();

  return std::make_unique<CallExprAST>(IdName, std::move(Args));
}

/// primary
///   ::= identifierexpr
///   ::= numberexpr
///   ::= parenexpr
static std::unique_ptr<ExprAST> ParsePrimary() {
  switch (CurTok) {
  default:
    return LogError("unknown token when expecting an expression");
  case tok_identifier:
    return ParseIdentifierExpr();
  case tok_number:
    return ParseNumberExpr();
  case '(':
    return ParseParenExpr();
  }
}

/// binoprhs
///   ::= ('+' primary)*
static std::unique_ptr<ExprAST> ParseBinOpRHS(int ExprPrec,
                                              std::unique_ptr<ExprAST> LHS) {
  // If this is a binop, find its precedence.
  while (true) {
    int TokPrec = GetTokPrecedence();

    // If this is a binop that binds at least as tightly as the current binop,
    // consume it, otherwise we are done.
    if (TokPrec < ExprPrec)
      return LHS;

    // Okay, we know this is a binop.
    int BinOp = CurTok;
    getNextToken(); // eat binop

    // Parse the primary expression after the binary operator.
    auto RHS = ParsePrimary();
    if (!RHS)
      return nullptr;

    // If BinOp binds less tightly with RHS than the operator after RHS, let
    // the pending operator take RHS as its LHS.
    int NextPrec = GetTokPrecedence();
    if (TokPrec < NextPrec) {
      RHS = ParseBinOpRHS(TokPrec + 1, std::move(RHS));
      if (!RHS)
        return nullptr;
    }

    // Merge LHS/RHS.
    LHS =
        std::make_unique<BinaryExprAST>(BinOp, std::move(LHS), std::move(RHS));
  }
}

/// expression
///   ::= primary binoprhs
///
static std::unique_ptr<ExprAST> ParseExpression() {
  auto LHS = ParsePrimary();
  if (!LHS)
    return nullptr;

  return ParseBinOpRHS(0, std::move(LHS));
}

/// prototype
///   ::= id '(' id* ')'
static std::unique_ptr<PrototypeAST> ParsePrototype() {
  if (CurTok != tok_identifier)
    return LogErrorP("Expected function name in prototype");

  std::string FnName = IdentifierStr;
  getNextToken();

  if (CurTok != '(')
    return LogErrorP("Expected '(' in prototype");

  std::vector<std::string> ArgNames;
  while (getNextToken() == tok_identifier)
    ArgNames.push_back(IdentifierStr);
  if (CurTok != ')')
    return LogErrorP("Expected ')' in prototype");

  // success.
  getNextToken(); // eat ')'.

  return std::make_unique<PrototypeAST>(FnName, std::move(ArgNames));
}

/// definition ::= 'def' prototype expression
static std::unique_ptr<FunctionAST> ParseDefinition() {
  getNextToken(); // eat def.
  auto Proto = ParsePrototype();
  if (!Proto)
    return nullptr;

  if (auto E = ParseExpression())
    return std::make_unique<FunctionAST>(std::move(Proto), std::move(E));
  return nullptr;
}

/// toplevelexpr ::= expression
static std::unique_ptr<FunctionAST> ParseTopLevelExpr() {
  if (auto E = ParseExpression()) {
    // Make an anonymous proto.
    auto Proto = std::make_unique<PrototypeAST>("__anon_expr",
                                                 std::vector<std::string>());
    return std::make_unique<FunctionAST>(std::move(Proto), std::move(E));
  }
  return nullptr;
}

/// external ::= 'extern' prototype
static std::unique_ptr<PrototypeAST> ParseExtern() {
  getNextToken(); // eat extern.
  return ParsePrototype();
}

//===----------------------------------------------------------------------===//
// Code Generation
//===----------------------------------------------------------------------===//

static std::unique_ptr<LLVMContext> TheContext;
static std::unique_ptr<Module> TheModule;
static std::unique_ptr<IRBuilder<>> Builder;
static std::map<std::string, Value *> NamedValues;

Value *LogErrorV(const char *Str) {
  LogError(Str);
  return nullptr;
}

Value *NumberExprAST::codegen() {
  return ConstantFP::get(*TheContext, APFloat(Val));
}

Value *VariableExprAST::codegen() {
  // Look this variable up in the function.
  Value *V = NamedValues[Name];
  if (!V)
    return LogErrorV("Unknown variable name");
  return V;
}

Value *BinaryExprAST::codegen() {
  Value *L = LHS->codegen();
  Value *R = RHS->codegen();
  if (!L || !R)
    return nullptr;

  switch (Op) {
  case '+':
    return Builder->CreateFAdd(L, R, "addtmp");
  case '-':
    return Builder->CreateFSub(L, R, "subtmp");
  case '*':
    return Builder->CreateFMul(L, R, "multmp");
  case '<':
    L = Builder->CreateFCmpULT(L, R, "cmptmp");
    // Convert bool 0/1 to double 0.0 or 1.0
    return Builder->CreateUIToFP(L, Type::getDoubleTy(*TheContext), "booltmp");
  default:
    return LogErrorV("invalid binary operator");
  }
}

Value *CallExprAST::codegen() {
  // Look up the name in the global module table.
  Function *CalleeF = TheModule->getFunction(Callee);
  if (!CalleeF)
    return LogErrorV("Unknown function referenced");

  // If argument mismatch error.
  if (CalleeF->arg_size() != Args.size())
    return LogErrorV("Incorrect # arguments passed");

  std::vector<Value *> ArgsV;
  for (unsigned i = 0, e = Args.size(); i != e; ++i) {
    ArgsV.push_back(Args[i]->codegen());
    if (!ArgsV.back())
      return nullptr;
  }

  return Builder->CreateCall(CalleeF, ArgsV, "calltmp");
}

Function *PrototypeAST::codegen() {
  // Make the function type:  double(double,double) etc.
  std::vector<Type *> Doubles(Args.size(), Type::getDoubleTy(*TheContext));
  FunctionType *FT =
      FunctionType::get(Type::getDoubleTy(*TheContext), Doubles, false);

  Function *F =
      Function::Create(FT, Function::ExternalLinkage, Name, TheModule.get());

  // Set names for all arguments.
  unsigned Idx = 0;
  for (auto &Arg : F->args())
    Arg.setName(Args[Idx++]);

  return F;
}

Function *FunctionAST::codegen() {
  // First, check for an existing function from a previous 'extern' declaration.
  Function *TheFunction = TheModule->getFunction(Proto->getName());

  if (!TheFunction)
    TheFunction = Proto->codegen();

  if (!TheFunction)
    return nullptr;

  // Create a new basic block to start insertion into.
  BasicBlock *BB = BasicBlock::Create(*TheContext, "entry", TheFunction);
  Builder->SetInsertPoint(BB);

  // Record the function arguments in the NamedValues map.
  NamedValues.clear();
  for (auto &Arg : TheFunction->args())
    NamedValues[std::string(Arg.getName())] = &Arg;

  if (Value *RetVal = Body->codegen()) {
    // Finish off the function.
    Builder->CreateRet(RetVal);

    // Validate the generated code, checking for consistency.
    verifyFunction(*TheFunction);

    return TheFunction;
  }

  // Error reading body, remove function.
  TheFunction->eraseFromParent();
  return nullptr;
}

//===----------------------------------------------------------------------===//
// Top-Level parsing and JIT Driver
//===----------------------------------------------------------------------===//

static void InitializeModule() {
  // Open a new context and module.
  TheContext = std::make_unique<LLVMContext>();
  TheModule = std::make_unique<Module>("my cool jit", *TheContext);

  // Create a new builder for the module.
  Builder = std::make_unique<IRBuilder<>>(*TheContext);
}

static void HandleDefinition() {
  if (auto FnAST = ParseDefinition()) {
    if (auto *FnIR = FnAST->codegen()) {
      fprintf(stderr, "Read function definition:");
      FnIR->print(errs());
      fprintf(stderr, "\n");
    }
  } else {
    // Skip token for error recovery.
    getNextToken();
  }
}

static void HandleExtern() {
  if (auto ProtoAST = ParseExtern()) {
    if (auto *FnIR = ProtoAST->codegen()) {
      fprintf(stderr, "Read extern: ");
      FnIR->print(errs());
      fprintf(stderr, "\n");
    }
  } else {
    // Skip token for error recovery.
    getNextToken();
  }
}

static void HandleTopLevelExpression() {
  // Evaluate a top-level expression into an anonymous function.
  if (auto FnAST = ParseTopLevelExpr()) {
    if (auto *FnIR = FnAST->codegen()) {
      fprintf(stderr, "Read top-level expression:");
      FnIR->print(errs());
      fprintf(stderr, "\n");

      // Remove the anonymous expression.
      FnIR->eraseFromParent();
    }
  } else {
    // Skip token for error recovery.
    getNextToken();
  }
}

/// top ::= definition | external | expression | ';'
static void MainLoop() {
  while (true) {
    fprintf(stderr, "ready> ");
    switch (CurTok) {
    case tok_eof:
      return;
    case ';': // ignore top-level semicolons.
      getNextToken();
      break;
    case tok_def:
      HandleDefinition();
      break;
    case tok_extern:
      HandleExtern();
      break;
    default:
      HandleTopLevelExpression();
      break;
    }
  }
}

//===----------------------------------------------------------------------===//
// Main driver code.
//===----------------------------------------------------------------------===//

int main() {
  // Install standard binary operators.
  // 1 is lowest precedence.
  BinopPrecedence['<'] = 10;
  BinopPrecedence['+'] = 20;
  BinopPrecedence['-'] = 20;
  BinopPrecedence['*'] = 40; // highest.

  // Prime the first token.
  fprintf(stderr, "ready> ");
  getNextToken();

  // Make the module, which holds all the code.
  InitializeModule();

  // Run the main "interpreter loop" now.
  MainLoop();

  // Print out all of the generated code.
  TheModule->print(errs(), nullptr);

  return 0;
}
#+end_src

[[LangImpl04-ja.html][Next: Adding JIT and Optimizer Support]]

# ends here
